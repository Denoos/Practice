TDD - test driven development
Технология разработки приложения через тестирование
Данный тип разработки увеличивает время на разработку, поскольку перед тем как писать код прложения, программист пишет код теста. Но это касается раннего периода разработки. Поскольку после определенного периода наличие тестов, наоборот начинает сокращать время на добавление нового функционала, поскольку программист "обретает смелость" к изменениям своего кода, не боясь его сломать. Потому что гит + тесты гарантируют, что мы сразу увидим ошибку в приложении и в случае чего, можем отменить изменения. Чем больше код покрыт тестами, тем проще вносить изменения. 
До тех пор, пока логика приложения не изменяется, мы можем полностью полагаться на разработанные тесты. Но, в случае если логика приложения поменялась, нам придется переработать тесты, связанные с внесенными изменениями.
Общий принцип TDD:
0) Формализация требования - нужно продумать, что собственно нужно добавить в код
1) Создается тест, который должен отражать логику разрабатываемого требования
2) Создаются заглушки для новых классов и методов, описанных в тесте
3) Выполняется минимальная реализация методов, для того, чтобы тест и код приложения могли скомпилироваться и тест стал проходимым
4) Рефакторинг кода - изменение внешнего вида, архитектуры, стиля и тп, без изменения функционала

Важный момент: одни и те же методы важно тестировать с помощью разных тестов. Каждый тест должен отслеживать свою логику. 
После создания теста рефакторинг проводится до тех пор, пока все тесты не будут зелеными.
